/*
 * This file is generated by jOOQ.
*/
package org.jooq.no.skotbuvel.portal.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.no.skotbuvel.portal.DefaultSchema;
import org.jooq.no.skotbuvel.portal.Indexes;
import org.jooq.no.skotbuvel.portal.Keys;
import org.jooq.no.skotbuvel.portal.tables.records.MembershipTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MembershipType extends TableImpl<MembershipTypeRecord> {

    private static final long serialVersionUID = 169279698;

    /**
     * The reference instance of <code>membership_type</code>
     */
    public static final MembershipType MEMBERSHIP_TYPE = new MembershipType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MembershipTypeRecord> getRecordType() {
        return MembershipTypeRecord.class;
    }

    /**
     * The column <code>membership_type.id</code>.
     */
    public final TableField<MembershipTypeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('membership_type_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>membership_type.active</code>.
     */
    public final TableField<MembershipTypeRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>membership_type.type</code>.
     */
    public final TableField<MembershipTypeRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>membership_type.year</code>.
     */
    public final TableField<MembershipTypeRecord, Integer> YEAR = createField("year", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>membership_type.price</code>.
     */
    public final TableField<MembershipTypeRecord, Integer> PRICE = createField("price", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>membership_type</code> table reference
     */
    public MembershipType() {
        this(DSL.name("membership_type"), null);
    }

    /**
     * Create an aliased <code>membership_type</code> table reference
     */
    public MembershipType(String alias) {
        this(DSL.name(alias), MEMBERSHIP_TYPE);
    }

    /**
     * Create an aliased <code>membership_type</code> table reference
     */
    public MembershipType(Name alias) {
        this(alias, MEMBERSHIP_TYPE);
    }

    private MembershipType(Name alias, Table<MembershipTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private MembershipType(Name alias, Table<MembershipTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEMBERSHIP_TYPE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MembershipTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEMBERSHIP_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MembershipTypeRecord> getPrimaryKey() {
        return Keys.MEMBERSHIP_TYPE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MembershipTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<MembershipTypeRecord>>asList(Keys.MEMBERSHIP_TYPE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MembershipType as(String alias) {
        return new MembershipType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MembershipType as(Name alias) {
        return new MembershipType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MembershipType rename(String name) {
        return new MembershipType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MembershipType rename(Name name) {
        return new MembershipType(name, null);
    }
}
