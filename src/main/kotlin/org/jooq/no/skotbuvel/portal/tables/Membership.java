/*
 * This file is generated by jOOQ.
*/
package org.jooq.no.skotbuvel.portal.tables;


import java.sql.Date;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.no.skotbuvel.portal.DefaultSchema;
import org.jooq.no.skotbuvel.portal.Indexes;
import org.jooq.no.skotbuvel.portal.Keys;
import org.jooq.no.skotbuvel.portal.tables.records.MembershipRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Membership extends TableImpl<MembershipRecord> {

    private static final long serialVersionUID = 1367443939;

    /**
     * The reference instance of <code>membership</code>
     */
    public static final Membership MEMBERSHIP = new Membership();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MembershipRecord> getRecordType() {
        return MembershipRecord.class;
    }

    /**
     * The column <code>membership.id</code>.
     */
    public final TableField<MembershipRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>membership.type</code>.
     */
    public final TableField<MembershipRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>membership.year</code>.
     */
    public final TableField<MembershipRecord, Date> YEAR = createField("year", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>membership.price</code>.
     */
    public final TableField<MembershipRecord, Integer> PRICE = createField("price", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>membership.created_by</code>.
     */
    public final TableField<MembershipRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>membership.created_date</code>.
     */
    public final TableField<MembershipRecord, OffsetDateTime> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>membership.updated_by</code>.
     */
    public final TableField<MembershipRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>membership.updated_date</code>.
     */
    public final TableField<MembershipRecord, OffsetDateTime> UPDATED_DATE = createField("updated_date", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>membership</code> table reference
     */
    public Membership() {
        this(DSL.name("membership"), null);
    }

    /**
     * Create an aliased <code>membership</code> table reference
     */
    public Membership(String alias) {
        this(DSL.name(alias), MEMBERSHIP);
    }

    /**
     * Create an aliased <code>membership</code> table reference
     */
    public Membership(Name alias) {
        this(alias, MEMBERSHIP);
    }

    private Membership(Name alias, Table<MembershipRecord> aliased) {
        this(alias, aliased, null);
    }

    private Membership(Name alias, Table<MembershipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEMBERSHIP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MembershipRecord> getPrimaryKey() {
        return Keys.MEMBERSHIP_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MembershipRecord>> getKeys() {
        return Arrays.<UniqueKey<MembershipRecord>>asList(Keys.MEMBERSHIP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Membership as(String alias) {
        return new Membership(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Membership as(Name alias) {
        return new Membership(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Membership rename(String name) {
        return new Membership(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Membership rename(Name name) {
        return new Membership(name, null);
    }
}
